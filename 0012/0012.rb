# 0.0 0.0 2.0 0.0 2.0 2.0 1.5 0.5
# 1: (0.0, 0.0)
# 2: (2.0, 0.0)
# 3: (2.0, 2.0)
# p: (1.5, 0.5)
# 1->2: (2.0-0.0, 0.0-0.0) = (2.0, 0.0)
# 2->p:
# 基準ベクトル(a) * 判定ベクトル(b) = ax * by - ay * bx
# (1->2)*(2->p) = 2.0 * 0.5 - 0.0 * 1.5 = 1.0 - 0 = 1.0 > 0
# 2->3: (2.0-2.0, 2.0-0.0) = (0.0, 2.0)
# 3->p:
# (2->3)*(3->p): 0.0 * 0.5 - 2.0 * (-0.5) = 0.0 + 1.0 = 1.0 > 0
# 3->1: (0.0-2.0, 0.0-2.0) = (-2.0, -2.0)
# 1->p:
# (3->1)*(1->p): -2.0 * -1.5 - -2.0 * -0.5 = 3 - 1 = 2 > 0

def vector(x, y)
  [y[0] - x[0], y[1] - x[1]]
end

def direction(x, y)
  x[0] * y[1] - x[1] * y[0] > 0 ? :+ : :-
end

STDIN.read.split("\n").each do |input|
  a, b, c, d = input.split(' ').map { |f| f.chomp.to_f }.each_slice(2).to_a

  result = [[a, b], [b, c], [c, a]].map do |s, e|
    direction(vector(s, e), vector(e, d))
  end
  puts result.uniq.size == 1 ? 'YES' : 'NO'
end
